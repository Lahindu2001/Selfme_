import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { jsPDF } from "jspdf";
import Navbar from "../Nav/Navbar";
import Footer from "../Footer/Footer";
import { isAuthenticated, removeAuthToken } from "../../utils/auth";

// Company Information
const companyInfo = {
  name: "Solar Solutions Inc.",
  address: ["123 Solar Street", "Green City, GC 12345", "Country"],
  phone: "+1-800-555-1234",
  email: "support@solarsolutions.com",
  website: "www.solarsolutions.com",
};

const UserDashboard = () => {
  const navigate = useNavigate();
  const [payments, setPayments] = useState([]);
  const [error, setError] = useState(null);

  // Get user data from localStorage
  const authUser = JSON.parse(localStorage.getItem("authUser") || "{}");
  const firstName = authUser.firstName || "User";

  // Check authentication
  useEffect(() => {
    if (!isAuthenticated()) {
      removeAuthToken();
      localStorage.removeItem("authUser");
      navigate("/login");
      return;
    }
    fetchPayments();
  }, [navigate]);

  const fetchPayments = async () => {
    try {
      console.log("🔄 Fetching payments...");
      const token = localStorage.getItem("token");
      if (!token) {
        console.log("❌ No token for payments");
        setError("Please login to view payment history");
        return;
      }
      const res = await axios.get("http://localhost:5000/api/payments", {
        headers: { Authorization: `Bearer ${token}` },
        timeout: 10000,
      });
      console.log("✅ Payments fetch response:", {
        status: res.status,
        dataLength: res.data.length,
        sampleData: res.data[0] || "No payments",
      });
      const paymentData = Array.isArray(res.data) ? res.data : [];
      setPayments(paymentData);
    } catch (err) {
      console.error("💥 Payments fetch error:", err);
      setError(err.response?.data?.message || "Failed to load payment history.");
    }
  };

  // ------------------- LOGO CONVERSION -------------------
  const getLogoAsBase64 = () => {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.onload = () => {
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");
        canvas.width = img.width;
        canvas.height = img.height;
        ctx.drawImage(img, 0, 0);
        const base64 = canvas.toDataURL("image/png");
        resolve(base64);
      };
      img.onerror = () => {
        console.warn("Could not load logo, proceeding without it");
        resolve(null);
      };
      img.src = "/newLogo.png";
    });
  };

  // ------------------- OFFICIAL PDF RECEIPT GENERATION -------------------
  const generateReceiptPDF = async (payment) => {
    try {
      const logoBase64 = await getLogoAsBase64();
      const doc = new jsPDF();
      const pageWidth = doc.internal.pageSize.getWidth();
      const pageHeight = doc.internal.pageSize.getHeight();

      // Add Letterhead
      const addLetterhead = () => {
        if (logoBase64) {
          doc.addImage(logoBase64, "PNG", 15, 10, 20, 20);
        }
        doc.setFont("times", "bold");
        doc.setFontSize(16);
        doc.setTextColor(0, 0, 0);
        doc.text(companyInfo.name, pageWidth / 2, 20, { align: "center" });
        doc.setFont("times", "normal");
        doc.setFontSize(10);
        doc.text(companyInfo.address.join(", "), pageWidth / 2, 28, { align: "center" });
        doc.text(
          `Phone: ${companyInfo.phone} | Email: ${companyInfo.email} | Website: ${companyInfo.website}`,
          pageWidth / 2,
          34,
          { align: "center" }
        );
        doc.setLineWidth(0.5);
        doc.setDrawColor(0, 0, 0);
        doc.line(15, 40, pageWidth - 15, 40);
      };

      // Add Footer
      const addFooter = (pageNum, totalPages) => {
        doc.setFont("times", "normal");
        doc.setFontSize(8);
        doc.setTextColor(50, 50, 50);
        doc.setLineWidth(0.3);
        doc.setDrawColor(150, 150, 150);
        doc.line(15, pageHeight - 20, pageWidth - 15, pageHeight - 20);
        const footerText = `Generated by ${companyInfo.name} Payment System`;
        doc.text(footerText, pageWidth / 2, pageHeight - 15, { align: "center" });
        const genDate = new Date().toLocaleDateString("en-GB");
        const genTime = new Date().toLocaleTimeString("en-GB", { hour12: false });
        doc.text(`Generated on ${genDate} at ${genTime}`, 15, pageHeight - 10);
        doc.text(`Page ${pageNum} of ${totalPages}`, pageWidth - 15, pageHeight - 10, { align: "right" });
      };

      // Add Signature Field
      const addSignatureField = () => {
        doc.setFont("times", "normal");
        doc.setFontSize(10);
        doc.setTextColor(0, 0, 0);
        doc.text("Authorized Signature: __________________", pageWidth - 85, pageHeight - 30);
      };

      // Initialize PDF
      addLetterhead();
      doc.setFont("times", "bold");
      doc.setFontSize(14);
      doc.setTextColor(0, 0, 0);
      doc.text("Payment Receipt", pageWidth / 2, 45, { align: "center" });

      // Payment Details
      let y = 50;
      doc.setFont("times", "bold");
      doc.setFontSize(12);
      doc.text(`Payment #${String(payment.payment_id).padStart(3, "0")}`, 15, y);
      doc.setFont("times", "normal");
      doc.setFontSize(10);
      doc.text(`Payment ID: ${payment.payment_id || "N/A"}`, pageWidth - 50, y);
      y += 10;

      // Payment Information
      const paymentFields = {
        payment_date: "Payment Date",
        amount: "Total Amount",
        status: "Status",
      };

      Object.keys(paymentFields).forEach((field) => {
        let value = payment[field] || "N/A";
        if (field === "payment_date" && value !== "N/A") {
          value = new Date(value).toLocaleDateString("en-GB");
        }
        if (field === "amount" && value !== "N/A") {
          value = `Rs. ${Number(value).toLocaleString()}`;
        }
        doc.setFont("times", "bold");
        doc.text(`${paymentFields[field]}:`, 20, y);
        doc.setFont("times", "normal");
        doc.text(String(value), 60, y);
        y += 10;
      });

      // Items Section
      const items = payment.items || [{ item_name: "Unknown Item", quantity: 1, subtotal: payment.amount }];
      doc.setFont("times", "bold");
      doc.text("Items:", 20, y);
      y += 10;

      items.forEach((item, index) => {
        const itemText = `${index + 1}. ${item.item_name || "Product"} - Qty: ${item.quantity || 1} - Rs. ${Number(
          item.subtotal || 0
        ).toLocaleString()}`;
        doc.setFont("times", "normal");
        doc.text(itemText, 25, y);
        y += 10;
      });

      // Tax and Grand Total
      const totalAmount = payment.amount || 0;
      const taxAmount = Math.round(totalAmount * 0.085);
      const grandTotal = totalAmount + taxAmount;

      y += 5;
      doc.setFont("times", "bold");
      doc.text(`Tax (8.5%):`, 20, y);
      doc.setFont("times", "normal");
      doc.text(`Rs. ${taxAmount.toLocaleString()}`, 60, y);
      y += 10;

      doc.setFont("times", "bold");
      doc.text(`Grand Total:`, 20, y);
      doc.setFont("times", "normal");
      doc.text(`Rs. ${grandTotal.toLocaleString()}`, 60, y);
      y += 10;

      // Add Signature and Footer
      addSignatureField();
      addFooter(1, 1);

      // Save PDF
      const timestamp = new Date().toISOString().split("T")[0];
      const fileName = `${companyInfo.name}_Receipt_${payment.payment_id}_${timestamp}.pdf`;
      doc.save(fileName);
      console.log(`✅ Receipt "${fileName}" downloaded successfully!`);
    } catch (error) {
      console.error("💥 Error generating receipt PDF:", error);
      setError("Error generating receipt. Please try again.");
    }
  };

  // ------------------- HANDLE DOWNLOAD RECEIPT -------------------
  const handleDownloadReceipt = async (payment) => {
    try {
      const token = localStorage.getItem("token");
      const response = await axios.get(`http://localhost:5000/api/receipt/${payment.payment_id}`, {
        headers: { Authorization: `Bearer ${token}` },
        responseType: "blob",
        timeout: 10000,
      });
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement("a");
      link.href = url;
      link.setAttribute("download", `receipt_${payment.payment_id}.pdf`);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
    } catch (err) {
      console.error("💥 Receipt download error:", err);
      if (err.response?.status === 404) {
        console.log("Falling back to client-side PDF generation...");
        await generateReceiptPDF(payment);
      } else {
        setError(err.response?.data?.message || "Failed to download receipt. Please try again.");
      }
    }
  };

  console.log("📊 Rendering UserDashboard - payments:", payments.length, "error:", error);

  return (
    <div className="user-dashboard">
      <Navbar />
      <div className="dashboard-content" style={{ margin: "50px", textAlign: "center" }}>
        <h2>Welcome to Your Dashboard, {firstName}!</h2>
        <div className="user-info">
          <p>Your solar journey starts here! Explore our packages or check your cart to continue.</p>
        </div>
        <div className="dashboard-actions">
          <button
            onClick={() => navigate("/?view=cart")}
            style={{
              backgroundColor: "#28a745",
              color: "white",
              padding: "10px 20px",
              border: "none",
              borderRadius: "4px",
              margin: "10px",
              cursor: "pointer",
            }}
          >
            View Cart
          </button>
          <button
            onClick={() => navigate("/?view=packages")}
            style={{
              backgroundColor: "#007bff",
              color: "white",
              padding: "10px 20px",
              border: "none",
              borderRadius: "4px",
              margin: "10px",
              cursor: "pointer",
            }}
          >
            Browse Packages
          </button>
        </div>
        <div
          style={{
            maxWidth: "900px",
            margin: "20px auto",
            backgroundColor: "white",
            borderRadius: "8px",
            boxShadow: "0 2px 10px rgba(0,0,0,0.1)",
            padding: "20px",
          }}
        >
          <h2 style={{ marginBottom: "20px", color: "#333" }}>Payment History</h2>
          {error && (
            <div style={{ color: "red", textAlign: "center", marginBottom: "20px" }}>{error}</div>
          )}
          {payments.length > 0 ? (
            <table style={{ width: "100%", borderCollapse: "collapse", marginBottom: "20px" }}>
              <thead>
                <tr style={{ backgroundColor: "#007BFF", color: "white" }}>
                  <th style={{ padding: "15px", textAlign: "left" }}>Payment ID</th>
                  <th style={{ padding: "15px", textAlign: "center" }}>Amount</th>
                  <th style={{ padding: "15px", textAlign: "center" }}>Date</th>
                  <th style={{ padding: "15px", textAlign: "center" }}>Status</th>
                  <th style={{ padding: "15px", textAlign: "center" }}>Slip</th>
                  <th style={{ padding: "15px", textAlign: "center" }}>Receipt</th>
                </tr>
              </thead>
              <tbody>
                {payments.map((payment, index) => (
                  <tr
                    key={payment.payment_id || `payment-${index}`}
                    style={{ backgroundColor: index % 2 === 0 ? "#f8f9fa" : "white" }}
                  >
                    <td style={{ padding: "15px" }}>{payment.payment_id}</td>
                    <td style={{ padding: "15px", textAlign: "center" }}>
                      Rs. {(payment.amount || 0).toLocaleString()}
                    </td>
                    <td style={{ padding: "15px", textAlign: "center" }}>
                      {payment.payment_date
                        ? new Date(payment.payment_date).toLocaleDateString()
                        : "N/A"}
                    </td>
                    <td style={{ padding: "15px", textAlign: "center" }}>
                      <span
                        style={{
                          color:
                            payment.status === "Pending"
                              ? "#ffc107"
                              : payment.status === "Paid"
                              ? "#28a745"
                              : "#dc3545",
                          fontWeight: "600",
                        }}
                      >
                        {payment.status}
                      </span>
                    </td>
                    <td style={{ padding: "15px", textAlign: "center" }}>
                      {payment.reference_no ? (
                        <a
                          href={`http://localhost:5000${payment.reference_no}`}
                          target="_blank"
                          rel="noopener noreferrer"
                        >
                          <img
                            src={`http://localhost:5000${payment.reference_no}`}
                            alt="Payment Slip"
                            style={{
                              width: "50px",
                              height: "50px",
                              objectFit: "cover",
                              borderRadius: "4px",
                            }}
                            onError={(e) => {
                              e.target.src =
                                "https://via.placeholder.com/50x50/007BFF/FFFFFF?text=Slip";
                              console.log(
                                "🖼️ Slip image load error for payment:",
                                payment.payment_id
                              );
                            }}
                          />
                        </a>
                      ) : (
                        "No Slip"
                      )}
                    </td>
                    <td style={{ padding: "15px", textAlign: "center" }}>
                      {payment.status === "Paid" ? (
                        <button
                          onClick={() => handleDownloadReceipt(payment)}
                          style={{
                            backgroundColor: "#28a745",
                            color: "white",
                            padding: "8px 16px",
                            border: "none",
                            borderRadius: "4px",
                            cursor: "pointer",
                          }}
                        >
                          Download Receipt
                        </button>
                      ) : payment.status === "Pending" ? (
                        <span style={{ color: "#ffc107", fontWeight: "600" }}>
                          Waiting for Approval
                        </span>
                      ) : (
                        "N/A"
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          ) : (
            <p style={{ textAlign: "center", color: "#6c757d" }}>
              No payment history available.
            </p>
          )}
        </div>
      </div>
      <Footer />
    </div>
  );
};

export default UserDashboard;